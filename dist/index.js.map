{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar Complex128 = require( '@stdlib/complex-float64-ctor' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 128-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex128)} value or 128-bit complex number\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex128 );\n* // returns <Complex128>\n*/\nfunction reviveComplex128( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex128' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex128( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveComplex128;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized 128-bit complex number.\n*\n* @module @stdlib/complex-reviver-float64\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var reviveComplex128 = require( '@stdlib/complex-reviver-float64' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex128 );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAa,QAAS,8BAA+B,EAoBzD,SAASC,EAAkBC,EAAKC,EAAQ,CACvC,OACCA,GACAA,EAAM,MACNA,EAAM,OAAS,cACfJ,EAAUI,EAAM,EAAG,GACnBJ,EAAUI,EAAM,EAAG,EAEZ,IAAIH,EAAYG,EAAM,GAAIA,EAAM,EAAG,EAEpCA,CACR,CAKAL,EAAO,QAAUG,ICtBjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNumber", "Complex128", "reviveComplex128", "key", "value", "main"]
}
